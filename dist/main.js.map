{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/components/buttondefines.tsx","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/number_pad.tsx","webpack:///./src/components/calculator_button.tsx","webpack:///./src/components/number_readout.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","NUMBER_BUTTON_DECIMAL_POINT","NUMBER_BUTTON_PLUS","NUMBER_BUTTON_MINUS","NUMBER_BUTTON_DIVIDE","NUMBER_BUTTON_MULTIPLY","NUMBER_BUTTON_EQUALS","NUMBER_BUTTON_PERCENT","NUMBER_BUTTON_CLEAR","NUMBER_BUTTON_INVERT","ReactDOM","render","Number_pad","document","getElementById","onScreenReadout","memory","operator","ButtonDefinitions","decimalTracker","buttonLayout","col1","col1Class","col2","col2Class","col3","col3Class","col4","col4Class","Component","props","super","this","state","ReadoutNumber","map","button","className","Calculator_button","handleClick","clickHandler","buttonClass","operatorDigit","number1","number2","answer","digit","buttonOperator","Math","pow","test","setState","addDigit","Number_Readout","readoutNumber","generateButtons","output","toString","type","checkForSingleDigit","onClick","no50Button"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = React;","export var NUMBER_BUTTON_DECIMAL_POINT = 10;\r\nexport var NUMBER_BUTTON_PLUS = 11;\r\nexport var NUMBER_BUTTON_MINUS = 12;\r\nexport var NUMBER_BUTTON_DIVIDE = 13;\r\nexport var NUMBER_BUTTON_MULTIPLY = 14;\r\nexport var NUMBER_BUTTON_EQUALS = 15;\r\nexport var NUMBER_BUTTON_PERCENT = 16;\r\nexport var NUMBER_BUTTON_CLEAR = 17;\r\nexport var NUMBER_BUTTON_INVERT = 18;","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { Number_pad } from \"./components/number_pad\"\r\n\r\nReactDOM.render(\r\n    <div>\r\n        <Number_pad />\r\n    </div>,\r\n    document.getElementById(\"maincontainer\")\r\n);","module.exports = ReactDOM;","import * as React from \"react\"\r\n\r\nexport interface Number_padProps {}\r\n\r\nimport { Calculator_button } from \"./calculator_button\";\r\nimport { Number_Readout } from \"./number_readout\"\r\nimport * as ButtonDefinitions from \"./buttondefines\"\r\n\r\nvar onScreenReadout: number = 0.0;\r\nvar memory: number = 0.0;\r\nvar operator: number = ButtonDefinitions.NUMBER_BUTTON_PLUS;\r\nvar decimalTracker: number = 0;\r\n\r\nlet buttonLayout = [\r\n    {col1: ButtonDefinitions.NUMBER_BUTTON_CLEAR, col1Class: \"operator_style\",\r\n    col2: ButtonDefinitions.NUMBER_BUTTON_INVERT, col2Class: \"operator_style\",\r\n    col3: ButtonDefinitions.NUMBER_BUTTON_PERCENT, col3Class: \"operator_style\",\r\n    col4: ButtonDefinitions.NUMBER_BUTTON_DIVIDE, col4Class: \"operator_style\"},\r\n\r\n    {col1: 7, col1Class: \"button_style\",\r\n    col2: 8, col2Class: \"button_style\",\r\n    col3: 9, col3Class: \"button_style\",\r\n    col4: ButtonDefinitions.NUMBER_BUTTON_MULTIPLY, col4Class: \"operator_style\"},\r\n\r\n    {col1: 4, col1Class: \"button_style\",\r\n    col2: 5, col2Class: \"button_style\",\r\n    col3: 6, col3Class: \"button_style\",\r\n    col4: ButtonDefinitions.NUMBER_BUTTON_MINUS, col4Class: \"operator_style\"},\r\n\r\n    {col1: 1, col1Class: \"button_style\",\r\n    col2: 2, col2Class: \"button_style\",\r\n    col3: 3, col3Class: \"button_style\",\r\n    col4: ButtonDefinitions.NUMBER_BUTTON_PLUS, col4Class: \"operator_style\"},\r\n\r\n    {col1: 0, col1Class: \"button_style pad-0\",\r\n    col2: 50, col2Class: \"hide\",\r\n    col3: ButtonDefinitions.NUMBER_BUTTON_DECIMAL_POINT, col3Class: \"button_style\",\r\n    col4: ButtonDefinitions.NUMBER_BUTTON_EQUALS, col4Class: \"operator_style\"},\r\n]\r\n\r\nexport class Number_pad extends React.Component<Number_padProps, {ReadoutNumber: number}>{\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {ReadoutNumber: onScreenReadout}\r\n    }\r\n\r\n    generateButtons(){\r\n        return buttonLayout.map((button: {\r\n            col1: number;\r\n            col1Class: string;\r\n            col2: number;\r\n            col2Class: string;\r\n            col3: number;\r\n            col3Class: string;\r\n            col4: number;\r\n            col4Class: string}) => \r\n            <div className=\"pad-row\">\r\n                <Calculator_button \r\n                    value={button.col1} \r\n                    handleClick={() => this.clickHandler(button.col1)} \r\n                    buttonClass={button.col1Class} />\r\n                <Calculator_button \r\n                    value={button.col2} \r\n                    handleClick={() => this.clickHandler(button.col2)}\r\n                    buttonClass={button.col1Class} />\r\n                <Calculator_button \r\n                    value={button.col3} \r\n                    handleClick={() => this.clickHandler(button.col3)}\r\n                    buttonClass={button.col3Class} />\r\n                <Calculator_button \r\n                    value={button.col4} \r\n                    handleClick={() => this.clickHandler(button.col4)}\r\n                    buttonClass={button.col4Class} />\r\n            </div>)\r\n    }\r\n\r\n    buttonOperator(operatorDigit: number, number1: number, number2: number): number{\r\n        let answer: number = 0;\r\n\r\n        if(operator === ButtonDefinitions.NUMBER_BUTTON_EQUALS){\r\n            answer = number2;\r\n        }\r\n        else{\r\n            switch(operatorDigit){\r\n                case ButtonDefinitions.NUMBER_BUTTON_PLUS:{\r\n                    answer = number1 + number2;\r\n                    break;\r\n                }\r\n\r\n                case ButtonDefinitions.NUMBER_BUTTON_MINUS:{\r\n                    answer = number1 - number2;\r\n                    break;\r\n                }\r\n\r\n                case ButtonDefinitions.NUMBER_BUTTON_MULTIPLY:{\r\n                    answer = number1 * number2;\r\n                    break;\r\n                }\r\n\r\n                case ButtonDefinitions.NUMBER_BUTTON_DIVIDE:{\r\n                    answer = number1 / number2;\r\n                    break;\r\n                }\r\n\r\n                case ButtonDefinitions.NUMBER_BUTTON_PERCENT:{\r\n                    answer = number2 / number1 * 100;\r\n                    break;\r\n                }\r\n\r\n                case ButtonDefinitions.NUMBER_BUTTON_EQUALS:{\r\n                    answer = number1;\r\n                    break;\r\n                }\r\n\r\n                default:{\r\n                    answer = 999;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        decimalTracker = 0;\r\n        return answer;\r\n    }\r\n\r\n    addDigit(digit: number): number {\r\n        switch(digit){\r\n            case ButtonDefinitions.NUMBER_BUTTON_CLEAR:{\r\n                onScreenReadout = 0;\r\n                memory = 0;\r\n                operator = ButtonDefinitions.NUMBER_BUTTON_PLUS;\r\n                decimalTracker = 0;\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_PLUS:{\r\n                    memory = this.buttonOperator(operator,\r\n                                                memory,\r\n                                                onScreenReadout);\r\n                    onScreenReadout = 0;\r\n                operator = ButtonDefinitions.NUMBER_BUTTON_PLUS;\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_MINUS:{\r\n                memory = this.buttonOperator(operator,\r\n                                            memory,\r\n                                            onScreenReadout);\r\n                    onScreenReadout = 0;\r\n                    operator = ButtonDefinitions.NUMBER_BUTTON_MINUS;\r\n                    break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_MULTIPLY:{\r\n                memory = this.buttonOperator(operator,\r\n                                            memory,\r\n                                            onScreenReadout);\r\n                onScreenReadout = 0;\r\n                operator = ButtonDefinitions.NUMBER_BUTTON_MULTIPLY;\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_DIVIDE:{\r\n                memory = this.buttonOperator(operator,\r\n                                            memory,\r\n                                            onScreenReadout);\r\n                onScreenReadout = 0;\r\n                operator = ButtonDefinitions.NUMBER_BUTTON_DIVIDE;\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_PERCENT:{\r\n                memory = this.buttonOperator(operator,\r\n                                            memory,\r\n                                            onScreenReadout);\r\n                onScreenReadout = 0;\r\n                operator = ButtonDefinitions.NUMBER_BUTTON_PERCENT;\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_EQUALS:{\r\n                onScreenReadout = this.buttonOperator(operator, memory, onScreenReadout);\r\n                operator = ButtonDefinitions.NUMBER_BUTTON_EQUALS;\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_INVERT:{\r\n                onScreenReadout = -onScreenReadout;\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_DECIMAL_POINT:{\r\n                if(!decimalTracker) ++decimalTracker;\r\n                break;\r\n            }\r\n\r\n            default:{\r\n                /*if(!decimalTracker){\r\n                    onScreenReadout = onScreenReadout * 10 + digit;\r\n                }\r\n                else{\r\n                    onScreenReadout = (onScreenReadout * Math.pow(10, decimalTracker) + digit)\r\n                    ++decimalTracker;\r\n                    onScreenReadout = onScreenReadout / Math.pow(10, decimalTracker);\r\n                }*/\r\n                \r\n                if(decimalTracker){\r\n                    onScreenReadout = ((onScreenReadout * Math.pow(10, decimalTracker)) + digit)\r\n                    onScreenReadout = onScreenReadout / Math.pow(10, decimalTracker);\r\n                    ++decimalTracker;\r\n                } \r\n                else{\r\n                    onScreenReadout = onScreenReadout * 10 + digit;\r\n                }\r\n                \r\n                break;\r\n            }\r\n        }\r\n        return onScreenReadout;\r\n    }\r\n\r\n    clickHandler(test: number){\r\n        //alert(\"Sum: \" + this.addDigit(test));\r\n        this.setState( state => ({ReadoutNumber: this.addDigit(test)}));\r\n    }\r\n\r\n    render(){\r\n        return <div className=\"pad-wrapper\">\r\n            <div className=\"pad-row\">\r\n                <Number_Readout readoutNumber={this.state.ReadoutNumber}/>\r\n            </div>\r\n            {this.generateButtons()}\r\n        </div>\r\n    }\r\n}","import * as React from \"react\";\r\nimport * as ButtonDefinitions from \"./buttondefines\"\r\n\r\n\r\nexport interface calculator_buttonProps {value: number, handleClick: any, buttonClass: string}\r\n\r\nexport class Calculator_button extends React.Component<calculator_buttonProps, {}>{\r\n    checkForSingleDigit(digit: number): string{\r\n        let output: string;\r\n        switch (digit){\r\n            case ButtonDefinitions.NUMBER_BUTTON_DECIMAL_POINT:{\r\n                output = \".\";\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_PLUS:{\r\n                output = \"+\";\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_MINUS:{\r\n                output = \"-\";\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_DIVIDE:{\r\n                output = \"/\";\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_MULTIPLY:{\r\n                output = \"*\";\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_EQUALS:{\r\n                output = \"=\";\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_CLEAR:{\r\n                output = \"C\";\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_PERCENT:{\r\n                output = \"%\";\r\n                break;\r\n            }\r\n\r\n            case ButtonDefinitions.NUMBER_BUTTON_INVERT:{\r\n                output = \"-/+\";\r\n                break;\r\n            }\r\n            \r\n            default: {\r\n                output = digit.toString();\r\n                break;\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n\r\n    no50Button(){\r\n        if(this.props.value != 50){\r\n            return <input   type=\"button\" \r\n                        className={this.props.buttonClass}\r\n                        value={this.checkForSingleDigit(this.props.value)} \r\n                        onClick={() => this.clickHandler(this.props.value)} />\r\n        }\r\n        return <div className=\"hide\"></div>;\r\n    }\r\n\r\n    render(){\r\n        return this.no50Button();//<input   type=\"button\" \r\n                        //className={this.props.buttonClass}\r\n                        //value={this.checkForSingleDigit(this.props.value)} \r\n                        //onClick={() => this.clickHandler(this.props.value)} />\r\n    }\r\n\r\n    clickHandler(test: number){\r\n        this.props.handleClick(test);\r\n    }\r\n}","import * as React from \"react\"\r\n\r\nexport interface Number_readoutProps {readoutNumber: number}\r\n\r\nexport class Number_Readout extends React.Component<Number_readoutProps, {}>{\r\n    //constructor(props: Readonly<number_readoutProps>){\r\n    //    super(props);\r\n    //    this.state = {outputNumber: \"\"};\r\n    //}\r\n    render(){\r\n        return <div className=\"readout\">{this.props.readoutNumber}</div>;\r\n    }\r\n}"],"sourceRoot":""}